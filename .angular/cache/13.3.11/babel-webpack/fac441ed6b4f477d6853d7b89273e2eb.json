{"ast":null,"code":"import { getValue, setValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { clearTemplate, registerEvents } from './util';\nvar refRegex = /Ref$/;\nvar ComplexBase = /** @class */function () {\n  function ComplexBase() {\n    this.hasChanges = false;\n    this.propCollection = {};\n    this.dataSource = {};\n    this.tags = [];\n    this.tagObjects = [];\n  }\n  ComplexBase.prototype.ngOnInit = function () {\n    this.registeredTemplate = {};\n    for (var _i = 0, _a = this.tags; _i < _a.length; _i++) {\n      var tag = _a[_i];\n      var objInstance = getValue('child' + tag.substring(0, 1).toUpperCase() + tag.substring(1), this);\n      if (objInstance) {\n        this.tagObjects.push({\n          instance: objInstance,\n          name: tag\n        });\n      }\n    }\n    var templateProperties = Object.keys(this);\n    for (var i = 0; i < templateProperties.length; i++) {\n      var tempProp = getValue(templateProperties[i], this);\n      if (typeof tempProp === 'object' && tempProp && tempProp.elementRef) {\n        if (!getValue(templateProperties[i].indexOf('Ref') !== -1 ? templateProperties[i] : templateProperties[i] + 'Ref', this)) {\n          setValue(templateProperties[i].indexOf('Ref') !== -1 ? templateProperties[i] : templateProperties[i] + 'Ref', tempProp, this);\n        }\n        if (getValue(\"viewContainerRef\", this) && !getValue(\"_viewContainerRef\", tempProp.elementRef.nativeElement) && !getValue(\"propName\", tempProp.elementRef.nativeElement)) {\n          setValue(\"_viewContainerRef\", getValue(\"viewContainerRef\", this), tempProp.elementRef.nativeElement);\n          setValue(\"propName\", templateProperties[i].replace(\"Ref\", ''), tempProp.elementRef.nativeElement);\n        }\n      }\n    }\n    templateProperties = Object.keys(this);\n    templateProperties = templateProperties.filter(function (val) {\n      return /Ref$/i.test(val);\n    });\n    for (var _b = 0, templateProperties_1 = templateProperties; _b < templateProperties_1.length; _b++) {\n      var tempName = templateProperties_1[_b];\n      var propName = tempName.replace('Ref', '');\n      setValue(propName.replace('_', '.'), getValue(propName, this), this.propCollection);\n    }\n    // Angular 9 compatibility to overcome ngOnchange not get triggered issue\n    // To Update properties to \"this.propCollection\"\n    var propList = Object.keys(this);\n    /* istanbul ignore next */\n    if (this.directivePropList) {\n      for (var k = 0; k < this.directivePropList.length; k++) {\n        var dirPropName = this.directivePropList[k];\n        if (propList.indexOf(dirPropName) !== -1 && getValue(dirPropName, this)) {\n          setValue(dirPropName, getValue(dirPropName, this), this.propCollection);\n        }\n      }\n      this.hasChanges = true;\n    }\n    this.isInitChanges = true;\n  };\n  ComplexBase.prototype.registerEvents = function (eventList) {\n    registerEvents(eventList, this, true);\n  };\n  ComplexBase.prototype.ngOnChanges = function (changes) {\n    for (var _i = 0, _a = Object.keys(changes); _i < _a.length; _i++) {\n      var propName = _a[_i];\n      var changedVal = changes[propName];\n      this.propCollection[propName] = changedVal.currentValue;\n    }\n    this.isUpdated = false;\n    this.hasChanges = true;\n  };\n  /* istanbul ignore next */\n  ComplexBase.prototype.clearTemplate = function (templateNames) {\n    clearTemplate(this, templateNames);\n  };\n  ComplexBase.prototype.getProperties = function () {\n    /* istanbul ignore next */\n    for (var _i = 0, _a = this.tagObjects; _i < _a.length; _i++) {\n      var tagObject = _a[_i];\n      this.propCollection[tagObject.name] = tagObject.instance.getProperties();\n    }\n    return this.propCollection;\n  };\n  ComplexBase.prototype.isChanged = function () {\n    var result = this.hasChanges;\n    if (!isNullOrUndefined(this.propCollection[this.property])) {\n      var tempProps = this.propCollection[this.property];\n      var props = Object.keys(tempProps[0]);\n      for (var d = 0; d < props.length; d++) {\n        if (!isNullOrUndefined(this.propCollection[props[d]])) {\n          var val = getValue(props[d], this);\n          var propVal = this.propCollection[this.property][0][props[d]];\n          if (!isNullOrUndefined(val) && this.propCollection[props[d]] !== val && propVal !== val) {\n            setValue(props[d], val, this.propCollection[this.property][0]);\n            setValue(props[d], val, this.propCollection);\n            this.hasChanges = true;\n            this.isUpdated = false;\n          }\n        }\n      }\n    }\n    /* istanbul ignore next */\n    for (var _i = 0, _a = this.tagObjects; _i < _a.length; _i++) {\n      var item = _a[_i];\n      result = result || item.instance.hasChanges;\n    }\n    return result || this.hasChanges;\n  };\n  ComplexBase.prototype.ngAfterContentChecked = function () {\n    this.hasChanges = this.isChanged();\n    if (this.isInitChanges || this.hasChanges) {\n      var templateProperties = Object.keys(this);\n      templateProperties = templateProperties.filter(function (val) {\n        return refRegex.test(val);\n      });\n      for (var _i = 0, templateProperties_2 = templateProperties; _i < templateProperties_2.length; _i++) {\n        var tempName = templateProperties_2[_i];\n        var propName = tempName.replace('Ref', '');\n        setValue(propName.replace('_', '.'), getValue(propName, this), this.propCollection);\n      }\n    }\n  };\n  ComplexBase.prototype.ngAfterViewChecked = function () {\n    /* istanbul ignore next */\n    if (this.isUpdated) {\n      this.hasChanges = false;\n    }\n  };\n  ComplexBase.prototype.ngAfterViewInit = function () {\n    /* istanbul ignore next */\n    this.isInitChanges = false;\n  };\n  ComplexBase.prototype.ngOnDestroy = function () {\n    /* istanbul ignore next */\n    this.directivePropList = [];\n  };\n  return ComplexBase;\n}();\nexport { ComplexBase };\nvar ArrayBase = /** @class */function () {\n  function ArrayBase(propertyName) {\n    this.list = [];\n    this.hasChanges = false;\n    this.propertyName = propertyName;\n  }\n  ArrayBase.prototype.ngOnInit = function () {\n    this.isInitChanges = true;\n  };\n  ArrayBase.prototype.ngAfterContentInit = function () {\n    var _this = this;\n    var index = 0;\n    /* istanbul ignore next */\n    this.list = this.children.map(function (child) {\n      child.dirIndex = index++;\n      child.property = _this.propertyName;\n      return child;\n    });\n    this.hasChanges = true;\n  };\n  ArrayBase.prototype.getProperties = function () {\n    var onlyProp = [];\n    for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n      var item = _a[_i];\n      onlyProp.push(item.getProperties());\n    }\n    return onlyProp;\n  };\n  ArrayBase.prototype.isChanged = function () {\n    var _this = this;\n    var result = false;\n    var index = 0;\n    var isSourceChanged = false;\n    // tslint:disable-next-line\n    var childrenDataSource = this.children.map(function (child) {\n      return child;\n    });\n    /* istanbul ignore next */\n    if (this.list.length === this.children.length) {\n      for (var i = 0; i < this.list.length; i++) {\n        if (this.list[i].propCollection.dataSource) {\n          if (this.list[i].dataSource && this.list[i].propCollection.dataSource !== this.list[i].dataSource) {\n            this.list[i].propCollection.dataSource = this.list[i].dataSource;\n            this.list[i].hasChanges = true;\n          }\n        }\n        if (this.list[i].hasChanges !== childrenDataSource[i].hasChanges) {\n          isSourceChanged = true;\n        }\n      }\n    }\n    this.hasNewChildren = this.list.length !== this.children.length || isSourceChanged ? true : null;\n    if (this.hasNewChildren) {\n      this.list = this.children.map(function (child) {\n        child.dirIndex = index++;\n        child.property = _this.propertyName;\n        return child;\n      });\n    }\n    /* istanbul ignore end */\n    for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n      var item = _a[_i];\n      result = result || item.hasChanges;\n    }\n    return !!this.list.length && result;\n  };\n  ArrayBase.prototype.clearTemplate = function (templateNames) {\n    var _this = this;\n    /* istanbul ignore next */\n    for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n      var item = _a[_i];\n      item.clearTemplate(templateNames && templateNames.map(function (val) {\n        return new RegExp(_this.propertyName).test(val) ? val.replace(_this.propertyName + '.', '') : val;\n      }));\n    }\n  };\n  ArrayBase.prototype.ngAfterContentChecked = function () {\n    this.hasChanges = this.isChanged();\n    for (var i = 0; i < this.list.length; i++) {\n      if (getValue('childColumns', this.list[i]) && getValue('property', this.list[i]) === 'columns') {\n        setValue('columns', getValue('childColumns', this.list[i]).getProperties(), this.list[i].propCollection);\n      }\n      this.list[i].isUpdated = true;\n    }\n  };\n  ArrayBase.prototype.ngAfterViewInit = function () {\n    this.isInitChanges = false;\n  };\n  ArrayBase.prototype.ngOnDestroy = function () {\n    this.list = [];\n  };\n  return ArrayBase;\n}();\nexport { ArrayBase };","map":null,"metadata":{},"sourceType":"module"}